{"version":3,"sources":["components/Map.module.scss","states/state.context.ts","states/dispatch.context.ts","components/Map.tsx","states/reducer.ts","components/RandomAnt.tsx","controllers/map.generator.ts","controllers/map.simulator.ts","components/Simulate.tsx","components/Lab.tsx","components/Report.tsx","appProviders.tsx","components/App.tsx","index.ts"],"names":["module","exports","initialAppState","ants","colony","food","lab","alpha","beta","q","rho","simulator","numAnt","numIteration","map","nodes","edges","canvas","report","messages","AppStateContext","createContext","useAppState","context","useContext","undefined","Error","AppDispatchContext","React","useAppDispatch","Map","canvasRef","useRef","dispatch","useEffect","current","ctx","getContext","imageSmoothingEnabled","clearRect","forEach","ant","fillRect","x","y","drawAnt","ref","className","styles","width","WIDTH","height","onClick","e","rect","getBoundingClientRect","Math","floor","clientX","left","clientY","top","type","appReducer","state","action","payload","targetAnt","find","t","id","index","indexOf","updated","slice","newMessages","concat","useAppReducer","RandomAnt","IconButton","aria-label","random","MapGenerator","generateTestMap","_generateTestMapNode","_generateTestMapEdge","edgeOutput","idCounter","n","right","_findNodeRight","push","nodeA","nodeB","distance","pheromone","down","_findNodeDown","upRight","_findNodeUpRight","downRight","_findNodeDownRight","nodeOutput","i","j","simulate","startNode","length","targetNode","message","totalFood","Array","from","keys","path","_getEdge","nodeOne","nodeTwo","edge","_getConnectedEdges","node","filter","_calculateP","lastNode","currentNode","candidateNode","connectedEdges","allowedEdges","pow","reduce","sum","counter","setTimeout","choice","nextNode","moveAnt","_updateT","Simulate","appDispatch","appState","Lab","useState","expanded","setExpanded","classes","makeStyles","theme","root","maxWidth","margin","spacing","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","useStyles","Card","Collapse","in","timeout","unmountOnExit","CardContent","noValidate","autoComplete","TextField","label","InputLabelProps","shrink","variant","size","value","onChange","event","target","helperText","Divider","href","CardActions","disableSpacing","clsx","aria-expanded","Report","isConsoleDisplay","setIsConsoleDisplay","isGameDisplayed","setIsGameDisplayed","padding","color","lightBlue","overflow","marginRight","fontSize","overflowY","overflowX","paddingRight","boxSizing","messagesList","m","key","ToggleSwitch","withStyles","switchBase","backgroundColor","checked","track","Switch","FormGroup","Grid","container","item","sm","FormControlLabel","control","Container","AppProviders","children","useReducer","Provider","position","background","App","Paper","square","elevation","Box","ReactDOM","render","createElement","document","getElementById"],"mappings":"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","file":"static/js/main.882b86fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Map_canvas__305z_\"};","import { createContext, useContext } from \"react\";\r\n\r\nexport const initialAppState: AppState = {\r\n  ants: [],\r\n  colony: {\r\n    food: 0\r\n  },\r\n  lab: {\r\n    alpha: 1,\r\n    beta: 1,\r\n    q: 1,\r\n    rho: 0.2\r\n  },\r\n  simulator: {\r\n    numAnt: 80,\r\n    numIteration: 80\r\n  },\r\n  map: {\r\n    nodes: [],\r\n    edges: []\r\n  },\r\n  canvas: {},\r\n  report: {\r\n    messages: []\r\n  }\r\n};\r\n\r\nexport const AppStateContext = createContext<AppState | undefined>(\r\n  initialAppState\r\n);\r\n\r\nexport const useAppState = () => {\r\n  const context = useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within a AppStateProvider\");\r\n  }\r\n  return context;\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nexport const AppDispatchContext = React.createContext<AppDispatch | undefined>(\r\n  undefined\r\n);\r\n\r\nexport function useAppDispatch(): AppDispatch {\r\n  const context = useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppDispatch must be used within a AppDispatchProvider\");\r\n  }\r\n  return context;\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport styles from \"./Map.module.scss\";\r\nimport { useAppState } from \"../states/state.context\";\r\nimport { useAppDispatch } from \"../states/dispatch.context\";\r\n\r\nexport const WIDTH = 100;\r\nexport const HEIGHT = 100;\r\nconst SCALE = 5;\r\n\r\nfunction drawAnt(ctx: CanvasRenderingContext2D, ant: Ant) {\r\n  ctx.fillRect(ant.x * SCALE, ant.y * SCALE, 2, 2);\r\n}\r\n\r\nconst Map: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const { ants } = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  //search me\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      if (ctx) {\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n        ants.forEach(ant => drawAnt(ctx, ant));\r\n      }\r\n    }\r\n  }, [ants, canvasRef]);\r\n\r\n  function handleCanvasClick(e: React.MouseEvent) {\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const ant = {\r\n        x: Math.floor((e.clientX - rect.left) / SCALE),\r\n        y: Math.floor((e.clientY - rect.top) / SCALE)\r\n      };\r\n      dispatch({ type: \"canvasAddAnt\", ant });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className={styles.canvas}\r\n      width={WIDTH * SCALE}\r\n      height={WIDTH * SCALE}\r\n      onClick={handleCanvasClick}\r\n    ></canvas>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import { useAppState } from \"./state.context\";\r\nimport { useAppDispatch } from \"./dispatch.context\";\r\n\r\nexport const appReducer = (state: AppState, action: AppAction) => {\r\n  switch (action.type) {\r\n    case \"canvasAddAnt\":\r\n      return { ...state, ants: [...state.ants, action.ant] };\r\n    case \"updateAllAnts\":\r\n      return { ...state, ants: action.payload };\r\n    case \"updateAnt\":\r\n      const targetAnt = state.ants.find(t => {\r\n        return t.id === action.payload.id;\r\n      });\r\n      if (targetAnt) {\r\n        const index = state.ants.indexOf(targetAnt);\r\n        const updated = [\r\n          ...state.ants.slice(0, index),\r\n          ...state.ants.slice(index + 1),\r\n          action.payload\r\n        ];\r\n        return { ...state, ants: updated };\r\n      } else {\r\n        return state;\r\n      }\r\n    case \"setAlpha\":\r\n      return { ...state, lab: { ...state.lab, alpha: action.payload } };\r\n    case \"setBeta\":\r\n      return { ...state, lab: { ...state.lab, beta: action.payload } };\r\n    case \"setQ\":\r\n      return { ...state, lab: { ...state.lab, q: action.payload } };\r\n    case \"setRho\":\r\n      return { ...state, lab: { ...state.lab, rho: action.payload } };\r\n    case \"setNumIteration\":\r\n      return {\r\n        ...state,\r\n        simulator: { ...state.simulator, numIteration: action.payload }\r\n      };\r\n    case \"setNumAnt\":\r\n      return {\r\n        ...state,\r\n        simulator: { ...state.simulator, numAnt: action.payload }\r\n      };\r\n    case \"consoleLog\":\r\n      if (action.payload) {\r\n        const newMessages = state.report.messages.concat(action.payload);\r\n        return {\r\n          ...state,\r\n          report: { ...state.report, messages: newMessages }\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    case \"consoleClear\": {\r\n      return {\r\n        ...state,\r\n        report: {\r\n          ...state.report,\r\n          messages: []\r\n        }\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type`);\r\n    }\r\n  }\r\n};\r\n\r\n//search me\r\nexport function useAppReducer(): [AppState, AppDispatch] {\r\n  return [useAppState(), useAppDispatch()];\r\n}\r\n","import React from \"react\";\r\n\r\nimport { WIDTH, HEIGHT } from \"./Map\";\r\nimport { useAppDispatch } from \"../states/dispatch.context\";\r\n\r\nimport BugReport from \"@material-ui/icons/BugReport\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst RandomAnt: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  function handleClick() {\r\n    const ant = {\r\n      x: Math.floor(Math.random() * WIDTH),\r\n      y: Math.floor(Math.random() * HEIGHT)\r\n    };\r\n    dispatch({ type: \"canvasAddAnt\", ant });\r\n  }\r\n\r\n  return (\r\n    <IconButton aria-label=\"random ant\" onClick={handleClick}>\r\n      <BugReport />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default RandomAnt;\r\n","export class MapGenerator {\r\n  //mock up for now\r\n  width: number = 25;\r\n  height: number = 25;\r\n\r\n  generateTestMap = () => {\r\n    const nodes = this._generateTestMapNode();\r\n    const edges = this._generateTestMapEdge(nodes);\r\n    return {\r\n      nodes,\r\n      edges\r\n    };\r\n  };\r\n\r\n  _generateTestMapEdge = (nodes: MapNode[]) => {\r\n    let edgeOutput: MapEdge[] = [];\r\n    let idCounter: number = 0;\r\n\r\n    nodes.forEach(n => {\r\n      const right = this._findNodeRight(n, nodes);\r\n      if (right) {\r\n        edgeOutput.push({\r\n          id: idCounter,\r\n          nodeA: n,\r\n          nodeB: right,\r\n          distance: 1,\r\n          pheromone: 1\r\n        });\r\n        idCounter++;\r\n      }\r\n      const down = this._findNodeDown(n, nodes);\r\n      if (down) {\r\n        edgeOutput.push({\r\n          id: idCounter,\r\n          nodeA: n,\r\n          nodeB: down,\r\n          distance: 1,\r\n          pheromone: 1\r\n        });\r\n        idCounter++;\r\n      }\r\n      const upRight = this._findNodeUpRight(n, nodes);\r\n      if (upRight) {\r\n        edgeOutput.push({\r\n          id: idCounter,\r\n          nodeA: n,\r\n          nodeB: upRight,\r\n          distance: 1.4142,\r\n          pheromone: 1\r\n        });\r\n        idCounter++;\r\n      }\r\n      const downRight = this._findNodeDownRight(n, nodes);\r\n      if (downRight) {\r\n        edgeOutput.push({\r\n          id: idCounter,\r\n          nodeA: n,\r\n          nodeB: downRight,\r\n          distance: 1.4142,\r\n          pheromone: 1\r\n        });\r\n        idCounter++;\r\n      }\r\n    });\r\n    return edgeOutput;\r\n  };\r\n\r\n  _generateTestMapNode = () => {\r\n    let nodeOutput: MapNode[] = [];\r\n    let idCounter: number = 0;\r\n\r\n    for (let i = 0; i < this.width; i++) {\r\n      for (let j = 0; j < this.height; j++) {\r\n        nodeOutput.push({ id: idCounter, x: i, y: j });\r\n        idCounter++;\r\n      }\r\n    }\r\n    return nodeOutput;\r\n  };\r\n\r\n  _findNodeRight = (nodeA: MapNode, nodes: MapNode[]) => {\r\n    return nodes.find(n => {\r\n      return n.x === nodeA.x + 1 && n.y === nodeA.y;\r\n    });\r\n  };\r\n\r\n  _findNodeDown = (nodeA: MapNode, nodes: MapNode[]) => {\r\n    return nodes.find(n => {\r\n      return n.x === nodeA.x && n.y === nodeA.y + 1;\r\n    });\r\n  };\r\n\r\n  _findNodeUpRight = (nodeA: MapNode, nodes: MapNode[]) => {\r\n    return nodes.find(n => {\r\n      return n.x === nodeA.x + 1 && n.y === nodeA.y - 1;\r\n    });\r\n  };\r\n\r\n  _findNodeDownRight = (nodeA: MapNode, nodes: MapNode[]) => {\r\n    return nodes.find(n => {\r\n      return n.x === nodeA.x + 1 && n.y === nodeA.y + 1;\r\n    });\r\n  };\r\n}\r\n","import { MapGenerator } from \"./map.generator\";\r\n\r\nexport function simulate(state: AppState, dispatch: AppDispatch) {\r\n  const mapGenerator = new MapGenerator();\r\n  const { edges, nodes } = mapGenerator.generateTestMap(); //TODO: seperate pheromone from this output\r\n  const startNode = nodes[Math.floor(Math.random() * nodes.length)]; //TODO: move into map generator\r\n  const targetNode = nodes[Math.floor(Math.random() * nodes.length)];\r\n\r\n  dispatch({ type: \"consoleClear\" });\r\n  dispatch({\r\n    type: \"consoleLog\",\r\n    payload: {\r\n      type: \"game\",\r\n      message: \"start point: (\" + startNode.x + \",\" + startNode.y + \")\"\r\n    }\r\n  });\r\n  dispatch({\r\n    type: \"consoleLog\",\r\n    payload: {\r\n      type: \"game\",\r\n      message: \"target point: (\" + targetNode.x + \",\" + targetNode.y + \")\"\r\n    }\r\n  });\r\n\r\n  const alpha = 1;\r\n  const beta = 1;\r\n  const Q = 1;\r\n  const rho = 0.2;\r\n  const numAnt = 10;\r\n  const numInteration = 20;\r\n\r\n  let totalFood = 0;\r\n\r\n  //init ants for simulation\r\n  const ants: Ant[] = Array.from(Array(numAnt).keys()).map(id => ({\r\n    id,\r\n    x: 25,\r\n    y: 25,\r\n    path: [startNode],\r\n    food: false\r\n  }));\r\n\r\n  const _getEdge = (\r\n    nodeOne: MapNode,\r\n    nodeTwo: MapNode\r\n  ): MapEdge | undefined => {\r\n    return edges.find(\r\n      edge =>\r\n        (edge.nodeA === nodeOne && edge.nodeB === nodeTwo) ||\r\n        (edge.nodeA === nodeTwo && edge.nodeB === nodeOne)\r\n    );\r\n  };\r\n\r\n  const _getConnectedEdges = (node: MapNode): MapEdge[] => {\r\n    return edges.filter(edge => edge.nodeA === node || edge.nodeB === node);\r\n  };\r\n\r\n  const _getOtherNode = (node: MapNode, edge: MapEdge): MapNode | undefined => {\r\n    if (edge.nodeA === node) {\r\n      return edge.nodeB;\r\n    }\r\n    if (edge.nodeB === node) {\r\n      return edge.nodeA;\r\n    }\r\n  };\r\n\r\n  //calculate the possiblity of choosing an avaliable edge\r\n  const _calculateP = (\r\n    lastNode: MapNode,\r\n    currentNode: MapNode,\r\n    candidateNode: MapNode\r\n  ): number => {\r\n    const edge = _getEdge(currentNode, candidateNode);\r\n\r\n    if (edge) {\r\n      const { pheromone, distance } = edge;\r\n      const connectedEdges = _getConnectedEdges(currentNode);\r\n      let allowedEdges = [];\r\n\r\n      if (\r\n        connectedEdges.length > 1 &&\r\n        currentNode !== startNode &&\r\n        currentNode !== targetNode\r\n      ) {\r\n        allowedEdges = connectedEdges.filter(\r\n          edge => edge.nodeA !== lastNode && edge.nodeB !== lastNode\r\n        );\r\n      } else {\r\n        allowedEdges = connectedEdges;\r\n      }\r\n\r\n      const numerator =\r\n        Math.pow(pheromone, alpha) * Math.pow(1 / distance, beta);\r\n      const denominator = allowedEdges\r\n        .map(\r\n          edge =>\r\n            Math.pow(edge.pheromone, alpha) * Math.pow(1 / edge.distance, beta)\r\n        )\r\n        .reduce((sum, current) => sum + current, 0);\r\n\r\n      return numerator / denominator;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  //update pheromon on an edge\r\n  const _updateT = (edge: MapEdge, ants: Ant[]) => {\r\n    edge.pheromone = edge.pheromone * (1 - rho);\r\n\r\n    ants.forEach(ant => {\r\n      //all ants that has passed this edge\r\n      const lastEdge = _getEdge(ant.path!.slice(-1)[0], ant.path!.slice(-2)[0]); //TODO: remove after refactor ant\r\n      if (lastEdge === edge) {\r\n        // edge.pheromone = edge.pheromone + (Q * (ant.food ? 2 : 1)) / edge.d;\r\n        edge.pheromone = edge.pheromone + Q / edge.distance;\r\n      }\r\n    });\r\n  };\r\n\r\n  //move ant to the next node and update path\r\n  function moveAnt(ant: Ant) {\r\n    const lastNode = ant.path!.slice(-2)[0]; //TODO: remove ! after refactor ant\r\n    const currentNode = ant.path!.slice(-1)[0]; //TODO: remove ! after refactor ant\r\n    let choice = Math.random();\r\n    const connectedEdges = _getConnectedEdges(currentNode);\r\n    let allowedEdges = [];\r\n\r\n    if (\r\n      connectedEdges.length > 1 &&\r\n      currentNode !== startNode &&\r\n      currentNode !== targetNode\r\n    ) {\r\n      allowedEdges = connectedEdges.filter(\r\n        edge => edge.nodeA !== lastNode && edge.nodeB !== lastNode\r\n      );\r\n    } else {\r\n      allowedEdges = connectedEdges;\r\n    }\r\n\r\n    for (let i = 0; i < allowedEdges.length; i++) {\r\n      const nextNode = _getOtherNode(currentNode, allowedEdges[i]);\r\n      if (nextNode) {\r\n        choice = choice - _calculateP(lastNode, currentNode, nextNode);\r\n        if (choice <= 0) {\r\n          ant.path!.push(nextNode); //TODO: remove ! after refactor ant\r\n          ant.x = nextNode.x;\r\n          ant.y = nextNode.y;\r\n\r\n          if (nextNode === targetNode) {\r\n            ant.food = true;\r\n          }\r\n          if (nextNode === startNode && ant.food === true) {\r\n            totalFood++;\r\n            ant.food = false;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    dispatch({\r\n      type: \"updateAnt\",\r\n      payload: ant\r\n    });\r\n  }\r\n\r\n  // Main simulation loop\r\n  let counter = 0; //  set your counter to 1\r\n\r\n  function simulate() {\r\n    dispatch({\r\n      type: \"updateAllAnts\",\r\n      payload: ants\r\n    });\r\n    //  create a loop function, pause in between an iteration\r\n    setTimeout(t => {\r\n      ants.forEach(ant => {\r\n        moveAnt(ant);\r\n      });\r\n      edges.forEach(edge => {\r\n        _updateT(edge, ants);\r\n      });\r\n      if (counter < numInteration) {\r\n        simulate();\r\n      } else if (counter === numInteration) {\r\n        // Print result after simulation\r\n        ants.forEach(ant => {\r\n          let message = \"K\" + ant.id + \": \";\r\n          ant.path!.forEach(node => {\r\n            //TODO: remove ! after refactor ant\r\n            message = message + node.id;\r\n            if (node === startNode) {\r\n              message = message + \"[Home]\";\r\n            }\r\n            if (node === targetNode) {\r\n              message = message + \"[Food]\";\r\n            }\r\n            message = message + \" \";\r\n          });\r\n\r\n          dispatch({\r\n            type: \"consoleLog\",\r\n            payload: { type: \"console\", message: message }\r\n          });\r\n        });\r\n\r\n        //TODO lol... only loop the edges touched by ants\r\n        // edges.forEach(edge => {\r\n        //   let message =\r\n        //     \"T\" + edge.nodeA.id + edge.nodeB.id + \": \" + edge.pheromone;\r\n        //   dispatch({\r\n        //     type: \"consoleLog\",\r\n        //     payload: { type: \"console\", message: message }\r\n        //   });\r\n        // });\r\n\r\n        let message = \"Total Food: \" + totalFood;\r\n        dispatch({\r\n          type: \"consoleLog\",\r\n          payload: { type: \"game\", message: message }\r\n        });\r\n      }\r\n      counter++;\r\n    }, 100);\r\n  }\r\n\r\n  simulate();\r\n}\r\n","import React from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayCircleFilledWhiteIcon from \"@material-ui/icons/PlayCircleFilledWhite\";\r\nimport { simulate } from \"../controllers/map.simulator\";\r\nimport { useAppReducer } from \"../states/reducer\";\r\n\r\nconst Simulate: React.FC = () => {\r\n  const [appState, appDispatch] = useAppReducer();\r\n\r\n  return (\r\n    <IconButton\r\n      aria-label=\"start simulator\"\r\n      onClick={() => simulate(appState, appDispatch)}\r\n    >\r\n      <PlayCircleFilledWhiteIcon />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default Simulate;\r\n","import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useAppState } from \"../states/state.context\";\r\nimport { useAppReducer } from \"../states/reducer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport RandomAnt from \"./RandomAnt\";\r\nimport Simulate from \"./Simulate\";\r\n\r\nconst Lab: React.FC = () => {\r\n  const { lab, simulator } = useAppState();\r\n  const [appState, appDispatch] = useAppReducer();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      maxWidth: 345,\r\n      \"& .MuiTextField-root\": {\r\n        margin: theme.spacing(1),\r\n        width: 200\r\n      }\r\n    },\r\n    expand: {\r\n      transform: \"rotate(0deg)\",\r\n      marginLeft: \"auto\",\r\n      transition: theme.transitions.create(\"transform\", {\r\n        duration: theme.transitions.duration.shortest\r\n      })\r\n    },\r\n    expandOpen: {\r\n      transform: \"rotate(180deg)\"\r\n    }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  //search me: handleInputChane\r\n  const handleNumAntChange = (event: any) => {\r\n    appDispatch({ type: \"setNumAnt\", payload: event.target.value });\r\n  };\r\n  const handleNumIterationChange = (event: any) => {\r\n    appDispatch({ type: \"setNumIteration\", payload: event.target.value });\r\n  };\r\n\r\n  const handleAlphaChange = (event: any) => {\r\n    appDispatch({ type: \"setAlpha\", payload: event.target.value });\r\n  };\r\n  const handleBetaChange = (event: any) => {\r\n    appDispatch({ type: \"setBeta\", payload: event.target.value });\r\n  };\r\n\r\n  const handleQChange = (event: any) => {\r\n    appDispatch({ type: \"setQ\", payload: event.target.value });\r\n  };\r\n  const handleRhoChange = (event: any) => {\r\n    appDispatch({ type: \"setRho\", payload: event.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          <CardContent>\r\n            <form noValidate autoComplete=\"off\">\r\n              <TextField\r\n                id=\"number-of-ants\"\r\n                label=\"Number of ants\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={simulator.numAnt}\r\n                onChange={handleNumAntChange}\r\n              />\r\n              <TextField\r\n                id=\"number-of-iteration\"\r\n                label=\"Number of iteration\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={simulator.numIteration}\r\n                onChange={handleNumIterationChange}\r\n              />\r\n              <TextField\r\n                id=\"alpha\"\r\n                label=\"Alpha (>=0)\"\r\n                helperText=\"the influence of pheromone\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={lab.alpha}\r\n                onChange={handleAlphaChange}\r\n              />\r\n              <TextField\r\n                id=\"beta\"\r\n                label=\"Beta (>=1)\"\r\n                helperText=\"the influence of the trail level\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={lab.beta}\r\n                onChange={handleBetaChange}\r\n              />\r\n              <TextField\r\n                id=\"q\"\r\n                label=\"Q\"\r\n                helperText=\"the pheromone amount\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={lab.q}\r\n                onChange={handleQChange}\r\n              />\r\n              <TextField\r\n                id=\"rho\"\r\n                label=\"Rho (>=0)\"\r\n                helperText=\"pheromone evaporation coefficient\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={lab.rho}\r\n                onChange={handleRhoChange}\r\n              />\r\n              <Divider variant=\"middle\" />\r\n              <a\r\n                href=\"https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms\"\r\n                target=\"blank\"\r\n              >\r\n                Wikipedia - Ant colony optimization algorithms\r\n              </a>\r\n            </form>\r\n          </CardContent>\r\n        </Collapse>\r\n        <CardActions disableSpacing>\r\n          <Simulate />\r\n          <RandomAnt />\r\n          <IconButton\r\n            className={clsx(classes.expand, {\r\n              [classes.expandOpen]: expanded\r\n            })}\r\n            onClick={handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Lab;\r\n","import React, { useState } from \"react\";\r\nimport { useAppState } from \"../states/state.context\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { lightBlue } from \"@material-ui/core/colors\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nconst Report: React.FC = () => {\r\n  const { report } = useAppState();\r\n  const [isConsoleDisplay, setIsConsoleDisplay] = useState(true);\r\n  const [isGameDisplayed, setIsGameDisplayed] = useState(true);\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      height: \"370px\",\r\n      padding: theme.spacing(3),\r\n      \"& .MuiFormControlLabel-root\": {\r\n        color: lightBlue[300]\r\n      },\r\n      \"& #message-list-grid\": {\r\n        height: \"360px\",\r\n        overflow: \"hidden\",\r\n        marginRight: \"22px\"\r\n      },\r\n      \"& .MuiContainer-root\": {\r\n        height: \"100%\",\r\n        fontSize: \"x-small\",\r\n        color: lightBlue[300],\r\n        overflowY: \"scroll\",\r\n        overflowX: \"hidden\",\r\n        paddingRight:\r\n          \"22px\" /* Increase/decrease this value for cross-browser compatibility */,\r\n        boxSizing: \"content-box\"\r\n      }\r\n    }\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const messagesList = report.messages\r\n    .filter(m => {\r\n      return (\r\n        (m.type === \"console\" && isConsoleDisplay) ||\r\n        (m.type === \"game\" && isGameDisplayed)\r\n      );\r\n    })\r\n    .map((m, i) => {\r\n      return (\r\n        <p key={i}>\r\n          [{m.type}] {m.message}\r\n        </p>\r\n      );\r\n    });\r\n\r\n  const ToggleSwitch = withStyles({\r\n    switchBase: {\r\n      color: lightBlue[300],\r\n      \"&$checked\": {\r\n        color: lightBlue[500]\r\n      },\r\n      \"&$checked + $track\": {\r\n        backgroundColor: lightBlue[500]\r\n      }\r\n    },\r\n    checked: {},\r\n    track: {}\r\n  })(Switch);\r\n\r\n  function toggleConsole() {\r\n    setIsConsoleDisplay(!isConsoleDisplay);\r\n  }\r\n\r\n  const toggleGame = () => {\r\n    setIsGameDisplayed(!isGameDisplayed);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormGroup>\r\n        <Grid container spacing={3}>\r\n          <Grid item sm={2}>\r\n            <FormControlLabel\r\n              control={\r\n                <ToggleSwitch\r\n                  checked={isConsoleDisplay}\r\n                  onChange={toggleConsole}\r\n                  value=\"isConsoleDisplay\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label=\"Console\"\r\n            />\r\n          </Grid>\r\n          <Grid item sm={2}>\r\n            <FormControlLabel\r\n              control={\r\n                <ToggleSwitch\r\n                  checked={isGameDisplayed}\r\n                  onChange={toggleGame}\r\n                  value=\"isGameDisplayed\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label=\"Game\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          <Grid item sm={12} id=\"message-list-grid\">\r\n            <Container>{messagesList}</Container>\r\n          </Grid>\r\n        </Grid>\r\n      </FormGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n","import React, { useReducer } from \"react\";\r\nimport {\r\n  AppStateContext,\r\n  initialAppState,\r\n  useAppState\r\n} from \"./states/state.context\";\r\nimport { AppDispatchContext } from \"./states/dispatch.context\";\r\nimport { appReducer } from \"./states/reducer\";\r\n\r\nconst AppProviders: React.ComponentType = ({ children }) => {\r\n  //  const [state, dispatch] = useAppReducer();\r\n  const [state, dispatch] = useReducer(appReducer, initialAppState);\r\n\r\n  return (\r\n    <AppStateContext.Provider value={state}>\r\n      <AppDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </AppDispatchContext.Provider>\r\n    </AppStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppProviders;\r\n","import React from \"react\";\r\n\r\nimport Map from \"./Map\";\r\nimport Lab from \"./Lab\";\r\nimport Report from \"./Report\";\r\nimport AppProviders from \"../appProviders\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//REVIEW (LY): grid the sections. need fix height for map, px height for report\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& .MuiBox-root\": {\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      marginLeft: \"200px\"\r\n    },\r\n    \"& #paper-map\": {\r\n      margin: \"auto\",\r\n      background:\r\n        \"radial-gradient(circle, rgba(199,199,199,1) 0%, rgba(240,251,255,1) 100%)\"\r\n    },\r\n    \"& #paper-report\": {\r\n      backgroundColor: \"#2f2e42\"\r\n    }\r\n  }\r\n}));\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppProviders>\r\n      <Container maxWidth=\"md\" className={classes.root}>\r\n        <Paper square id=\"paper-map\" elevation={3}>\r\n          <Map />\r\n        </Paper>\r\n        <Box>\r\n          <Lab />\r\n        </Box>\r\n        <Paper square id=\"paper-report\">\r\n          <Report />\r\n        </Paper>\r\n      </Container>\r\n    </AppProviders>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(\r\n  React.createElement(App, null, null),\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}